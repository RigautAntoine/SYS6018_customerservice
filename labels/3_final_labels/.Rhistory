m_blue <- rnorm(10, 1, 1)
m_orange <- rnorm(10, -1, 1)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 1)
m_orange <- rnorm(10, -1, 1)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 1)
m_orange <- rnorm(10, -1, 1)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 5)
m_orange <- rnorm(10, -1, 5)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
m_blue <- rnorm(10, 1, 3)
m_orange <- rnorm(10, -1, 3)
blue1 <- sample(1:10, 100, replace = T)
blue2 <- sample(1:10, 100, replace = T)
orange1 <- sample(1:10, 100, replace = T)
orange2 <- sample(1:10, 100, replace = T)
blue <- cbind(sapply(blue1, function(p)rnorm(1, m_blue[p], 1)),
sapply(blue2, function(p)rnorm(1, m_blue[p], 1)))
orange <- cbind(sapply(orange1, function(p)rnorm(1, m_orange[p], 1)),
sapply(orange2, function(p)rnorm(1, m_orange[p], 1)))
df <- data.frame(rbind(blue, orange))
df$y <- factor(c(rep("blue", 100), rep("orange", 100)))
plot(df$X1, df$X2, col=df$y, pch=20)
rbivariate <- function(mean.x = 70, sd.x=3, mean.y=162, sd.y=14, r=.50, iter=100) {
z1 <- rnorm(iter)
z2 <- rnorm(iter)
x <- sqrt(1-r^2)*sd.x*z1 + r*sd.x*z2 + mean.x
y <- sd.y*z2 + mean.y
return(list(x,y))
}
data <- rbivariate(iter=1000)
data
data <- rbivariate(iter=1000)
mean(data[[1]])
sd(data[[1]])
mean(data[[2]])
sd(data[[2]])
plot(data[[1]],data[[2]])
load("C:/UVA/DataMining/SYS6018_customerservice/script/logisticRegression.RData")
dtm.m <- rbind(meta(corpus, "industry"), dtm.m)
library(tm)
library(stringr)
library(slam)
library(glmnet)
library(ROCR)
library(ggplot2)
setwd("C:/UVA/DataMining/SYS6018_customerservice/labels/3_final_labels")
dtm.m <- rbind(meta(corpus, "industry"), dtm.m)
dtm.m <- cbind(unlist(meta(corpus, "complaint")), unlist(meta(corpus, "sentiment")), as.matrix(dtm))
dtm.m <- cbind(unlist(meta(corpus, "industry")), dtm.m)
View(dtm.m)
View(tweets)
View(dtm.m)
air.dtm <- dtm.m[dtm.m$V1 == 1,-1]
air.dtm <- dtm.m[V1 == 1,-1]
air.dtm <- dtm.m["V1" == 1,-1]
air.dtm <- dtm.m["V1" == 1,]
View(air.dtm)
air.dtm <- subset(dtm.m, "V1" == 1)
dtm.m <- data.frame(complaint<-unlist(meta(corpus, "industry")), dtm.m)
dtm.m <- cbind(unlist(meta(corpus, "complaint")), unlist(meta(corpus, "sentiment")), as.matrix(dtm))
dtm.m <- data.frame(industry=unlist(meta(corpus, "industry")), dtm.m)
air.dtm <- as.matrix(dtm.m[dtm.m$industry == "airlines", -1]
)
View(air.dtm)
tel.dtm <- as.matrix(dtm.m[dtm.m$industry == "telecom", -1])
nrow(air.dtm)
ind <- sample(nrow(air.dtm), 1500)
train <- air.dtm[ind,] # Train has about 70% of the set
air.test <- air.dtm[-ind,] # Test has the remaining 30%
air.cv.lam <- cv.glmnet(air.train[,-1], factor(air.train[,1]), alpha=1, family="binomial", type.measure = "class")
air.train <- air.dtm[ind,] # Train has about 70% of the set
air.test <- air.dtm[-ind,] # Test has the remaining 30%
air.cv.lam <- cv.glmnet(air.train[,-1], factor(air.train[,1]), alpha=1, family="binomial", type.measure = "class")
air.bestlam <- air.cv.lam$lambda.min # best lambda as selected by cross validation
air.trainll <- glmnet(air.train[,-1], factor(air.train[,1]), alpha=1, family="binomial")
air.probs <- predict(air.trainll, newx = air.test[,-1], s = air.bestlam, type="response")
air.preds <- prediction(air.probs, test[,1])
air.preds <- prediction(air.probs, air.test[,1])
air.perf <- performance(air.preds, measure = "tpr", x.measure = "fpr")
air.auc <- performance(air.preds, measure = "auc")
air.auc <- air.auc@y.values[[1]]
air.roc.data <- data.frame(fpr=unlist(air.perf@x.values),
tpr=unlist(air.perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
air.roc.data <- data.frame(fpr=unlist(air.perf@x.values),
tpr=unlist(air.perf@y.values),
model="GLM")
ggplot(air.roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
air.roc.data <- data.frame(fpr=unlist(air.perf@x.values),
tpr=unlist(air.perf@y.values),
model="GLM")
ggplot(air.roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", air.auc))
set.seed(1)
ind <- sample(nrow(tel.dtm), 1500)
tel.train <- tel.dtm[ind,] # Train has about 70% of the set
tel.test <- tel.dtm[-ind,] # Test has the remaining 30%
# Logistic regression with regularization
tel.cv.lam <- cv.glmnet(tel.train[,-1], factor(tel.train[,1]), alpha=1, family="binomial", type.measure = "class")
tel.bestlam <- tel.cv.lam$lambda.min # best lambda as selected by cross validation
# Estimate lasso logistic with lambda chosen by cv on training data
tel.trainll <- glmnet(tel.train[,-1], factor(tel.train[,1]), alpha=1, family="binomial")
tel.probs <- predict(tel.trainll, newx = tel.test[,-1], s = tel.bestlam, type="response")
# AUC curve
tel.preds <- prediction(tel.probs, tel.test[,1])
tel.perf <- performance(tel.preds, measure = "tpr", x.measure = "fpr")
tel.auc <- performance(tel.preds, measure = "auc")
tel.auc <- tel.auc@y.values[[1]]
tel.roc.data <- data.frame(fpr=unlist(tel.perf@x.values),
tpr=unlist(tel.perf@y.values),
model="GLM")
ggplot(tel.roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", tel.auc))
plot(perf, colorize = TRUE)
preds <- prediction(probs, test[,1])
probs <- predict(trainll, newx = test[,-1], s = bestlam, type="response")
testPred <- predict(trainll, newx = test[,-1], s = bestlam, type="class")
preds <- prediction(probs, test[,1])
perf <- performance(preds, measure = "tpr", x.measure = "fpr")
plot(perf, colorize = TRUE)
plot(air.perf, add = TRUE)
plot(tel.perf, add = TRUE)
plot(perf)
plot(air.perf, add = TRUE)
plot(tel.perf, add = TRUE)
plot(perf, col="red")
plot(air.perf, add = TRUE, col="green")
plot(tel.perf, add = TRUE, col="blue")
preds <- prediction(probs, test[,1])
perf <- performance(preds, measure = "tpr", x.measure = "fpr")
auc <- performance(preds, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
plot(perf, col="red", main = "ROC curve")
plot(air.perf, add = TRUE, col="green")
plot(tel.perf, add = TRUE, col="blue")
scores <- read.csv("sentimentScores.csv", stringsAsFactors = F)
names(scores)[5] <- "sentiment"
scores <- scores[,c("text", "industry", "sentiment", "complaint")]
set.seed(1)
ind <- sample(nrow(scores), 3000)
naive.train <- scores[ind,]
naive.test <- scores[-ind,]
naive <- glm(complaint~sentiment, data=naive.train, family = "binomial")
summary(naive)
probs <- predict(naive, newdata = naive.test, type = "response")
preds <- sapply(probs, function(x){ifelse(x > 0.5, 1, 0)})
table(preds, naive.test$complaint)
# Plot an AUC curve
library(ROCR)
library(ggplot2)
preds <- prediction(probs, naive.test$complaint)
perf <- performance(preds, measure = "tpr", x.measure = "fpr")
auc <- performance(preds, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
summary(naive)
sum(preds == naive.test$complaint) / length(preds) # 74% Accuracy
# Recall
sum(preds == 1 & preds == naive.test$complaint) / sum(naive.test$complaint == 1) # 0.5% recall
# Precision
sum(preds == 1 & preds == naive.test$complaint) / sum(preds == 1) # 30% precision
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
probs <- predict(trainll, newx = test[,-1], s = bestlam, type="response")
testPred <- predict(trainll, newx = test[,-1], s = bestlam, type="class")
table(testPred, test[,1])
# Compute metrics of performance
# Accuracy
sum(testPred == test[,1]) / length(testPred) # 83% Accuracy
# Recall
sum(testPred == 1 & testPred == test[,1]) / sum(test[,1] == 1) # 55% recall
# Precision
sum(testPred == 1 & testPred == test[,1]) / sum(testPred == 1) # 77% precision
# AUC curve
preds <- prediction(probs, test[,1])
perf <- performance(preds, measure = "tpr", x.measure = "fpr")
auc <- performance(preds, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
plot(perf, col="red", main = "ROC curve")
plot(air.perf, add = TRUE, col="green")
plot(tel.perf, add = TRUE, col="blue")
corpus <- Corpus(DataframeSource(tweets), readerControl=list(reader=myReader))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), "https",'southwestair', "americanairlines", "delta", "united", "deltaassist", "americanair", "jetblue", "comcast", "comcastcares","verizonsupport","vzwsupport", "verizon", "att", "attcares", "tmobilehelp", "dish", "hulu_support", "dish_answers", "hulu", "tmobile", "comcastsucks"))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, stripWhitespace)
dtm = DocumentTermMatrix(corpus, control = list(minWordLength = 3, bounds=list(global=c(5,5125))))
dtm
naive.probs <- predict(naive, newdata = naive.test, type = "response")
naive.preds <- sapply(naive.probs, function(x){ifelse(x > 0.5, 1, 0)})
table(naive.preds, naive.test$complaint)
# Plot an AUC curve
naive.preds <- prediction(naive.probs, naive.test$complaint)
naive.perf <- performance(naive.preds, measure = "tpr", x.measure = "fpr")
naive.auc <- naive.performance(naive.preds, measure = "auc")
naive.auc <- auc@y.values[[1]]
naive.roc.data <- data.frame(fpr=unlist(naive.perf@x.values),
tpr=unlist(naive.perf@y.values),
model="GLM")
ggplot(naive.roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", naive.auc))
naive.auc <- performance(naive.preds, measure = "auc")
naive.auc <- auc@y.values[[1]]
naive.auc <- naive.auc@y.values[[1]]
naive.preds <- prediction(naive.probs, naive.test$complaint)
naive.perf <- performance(naive.preds, measure = "tpr", x.measure = "fpr")
naive.auc <- performance(naive.preds, measure = "auc")
naive.auc <- naive.auc@y.values[[1]]
naive.roc.data <- data.frame(fpr=unlist(naive.perf@x.values),
tpr=unlist(naive.perf@y.values),
model="GLM")
ggplot(naive.roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", naive.auc))
summary(naive)
View(coef.df)
setwd("C:/UVA/DataMining/SYS6018_customerservice/labels/3_final_labels")
tweets <- read.csv("trainData.csv", stringsAsFactors = T)
scores <- read.csv("sentimentScores.csv", stringsAsFactors = F)
names(scores)[5] <- "sentiment"
scores <- scores[,c("text", "industry", "sentiment", "complaint")]
# Naive model
set.seed(1)
ind <- sample(nrow(scores), 3000)
naive.train <- scores[ind,]
naive.test <- scores[-ind,]
naive <- glm(complaint~sentiment, data=naive.train, family = "binomial")
summary(naive)
naive.probs <- predict(naive, newdata = naive.test, type = "response")
naive.preds <- sapply(naive.probs, function(x){ifelse(x > 0.5, 1, 0)})
table(naive.preds, naive.test$complaint)
naive.preds <- prediction(naive.probs, naive.test$complaint)
naive.perf <- performance(naive.preds, measure = "tpr", x.measure = "fpr")
naive.auc <- performance(naive.preds, measure = "auc")
naive.auc <- naive.auc@y.values[[1]]
naive.roc.data <- data.frame(fpr=unlist(naive.perf@x.values),
tpr=unlist(naive.perf@y.values),
model="GLM")
ggplot(naive.roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", naive.auc))
sum(naive.preds == naive.test$complaint) / length(naive.preds) # 74% Accuracy
naive.preds <- sapply(naive.probs, function(x){ifelse(x > 0.5, 1, 0)})
sum(naive.preds == naive.test$complaint) / length(naive.preds) # 74% Accuracy
sum(naive.preds == 1 & naive.preds == naive.test$complaint) / sum(naive.test$complaint == 1) # 0.5% recall
sum(naive.preds == 1 & naive.preds == naive.test$complaint) / sum(naive.preds == 1) # 30% precision
sum(naive.preds == naive.test$complaint) / length(naive.preds) # 74% Accuracy
# Recall
sum(naive.preds == 1 & naive.preds == naive.test$complaint) / sum(naive.test$complaint == 1) # 0.5% recall
# Precision
sum(naive.preds == 1 & naive.preds == naive.test$complaint) / sum(naive.preds == 1) # 30% precision
POStags <- read.csv("POStags.csv", sep = "\t", header = F, stringsAsFactors = F)
names(POStags) <- c("token", "tag", "confidence", "original")
tweets$tokens <- apply(POStags, 1, function(x){
tags <- unlist(str_split(x[2]," "))
tokens <- unlist(str_split(x[1]," "))
confidence <- as.numeric(gsub(",", ".", unlist(str_split(x[3], " "))))
return(paste(tokens[(tags %in% c("N", "^", "Z", "V", "M", "A", "R", "Y", "#")) & confidence > 0.6], collapse=" "))
})
tweets$sentiment <- scores$sentiment
tweets[tweets$tokens == "",] # None of these are complaints. It is safe to get rid of them
tweets <- tweets[tweets$tokens != "",]
docvar <- list(industry="industry", content="tokens", complaint="complaint", sentiment="sentiment")
myReader <- readTabular(mapping=docvar)
corpus <- Corpus(DataframeSource(tweets), readerControl=list(reader=myReader))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), "https",'southwestair', "comcastdoesntcare", "americanairlines", "delta", "united", "deltaassist", "americanair", "jetblue", "comcast", "comcastcares","verizonsupport","vzwsupport", "verizon", "att", "attcares", "tmobilehelp", "dish", "hulu_support", "dish_answers", "hulu", "tmobile", "comcastsucks"))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, stripWhitespace)
dtm = DocumentTermMatrix(corpus, control = list(minWordLength = 3, bounds=list(global=c(5,5125))))
dtm
corpus <- corpus[row_sums(dtm) > 0] # Note that this makes us lose 7 complaints out of 120 tweets
dtm <- dtm[row_sums(dtm) > 0,] # And we suppress the documents that are now empty
dtm
dtm.m <- cbind(unlist(meta(corpus, "complaint")), unlist(meta(corpus, "sentiment")), as.matrix(dtm))
set.seed(1)
ind <- sample(nrow(dtm.m), 3000)
train <- dtm.m[ind,] # Train has about 70% of the set
test <- dtm.m[-ind,] # Test has the remaining 30%
cv.lam <- cv.glmnet(train[,-1], factor(train[,1]), alpha=1, family="binomial", type.measure = "class")
plot(cv.lam)
bestlam <- cv.lam$lambda.min # best lambda as selected by cross validation
bestlam
log(bestlam) # what's in the plot
trainll <- glmnet(train[,-1], factor(train[,1]), alpha=1, family="binomial")
trainll.coef <- predict(trainll, type="coefficients", s=bestlam)
coef.df <- data.frame(word = unlist(trainll.coef@Dimnames[1]), as.matrix(trainll.coef))
coef.df$word <- as.character(coef.df$word)
coef.df <- coef.df[coef.df$X1 != 0,]
coef.df <- coef.df[order(coef.df$X1, decreasing = T),]
View(coef.df)
